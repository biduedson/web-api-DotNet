// Importa o contexto do banco de dados (AppDbContext), que representa as entidades e as tabelas do banco
using Domain.Repositories.EquipamentoRepository;
using Domain.Repositories.UsuarioRepository;
using Infrastructure.Data.Context;
using Infrastructure.Data.Repositories;


// Importa os recursos do Entity Framework Core necess√°rios para configurar o banco de dados
using Microsoft.EntityFrameworkCore;

// Importa a interface IConfiguration, usada para acessar configura√ß√µes da aplica√ß√£o (como strings de conex√£o)
using Microsoft.Extensions.Configuration;

// Importa a interface IServiceCollection, que permite registrar servi√ßos na inje√ß√£o de depend√™ncia
using Microsoft.Extensions.DependencyInjection;

namespace Infrastructure
{
    // Define uma classe est√°tica chamada InjecaoDeDependencia.
    // Ela serve para organizar as configura√ß√µes da camada de infraestrutura, como acesso a banco de dados.
    public static class InjecaoDeDependencia
    {
        /// <summary>
        /// Este m√©todo √© uma extens√£o da IServiceCollection.
        /// Ele registra os servi√ßos da camada de Infrastructure (como o AppDbContext) no container de inje√ß√£o de depend√™ncia.
        /// </summary>
        /// <param name="services">√â a cole√ß√£o de servi√ßos da aplica√ß√£o, usada para registrar depend√™ncias.</param>
        /// <param name="configuration">√â o objeto que carrega as configura√ß√µes da aplica√ß√£o (como appsettings.json).</param>
        public static void AdicionarInfrastructure(this IServiceCollection services, IConfiguration configuration)
        {
            /*
            ‚ùì O que √© `this IServiceCollection services`?
            - √â uma **extens√£o de m√©todo**, ou seja, esse m√©todo ser√° chamado como se fosse parte da IServiceCollection.
              Exemplo: builder.Services.AdicionarInfrastructure(...);

            üß† `IServiceCollection`:
            - √â uma interface fornecida pelo .NET que representa uma **cole√ß√£o de servi√ßos** que podem ser injetados via DI (Dependency Injection).
            - Usamos ela para registrar classes, interfaces, banco de dados, etc.

            üß† `IConfiguration`:
            - Interface que representa as configura√ß√µes da aplica√ß√£o.
            - Pode acessar valores definidos em arquivos como `appsettings.json`, vari√°veis de ambiente, etc.
            - Aqui usamos para obter a **string de conex√£o do banco de dados**.
            */

            // Obt√©m a string de conex√£o chamada "Default" do arquivo de configura√ß√£o (appsettings.json, por exemplo)
            var connectionString = configuration.GetConnectionString("Default");

            // Cria a vers√£o do servidor MySQL que ser√° usada pelo EF Core (aqui ainda sem especificar, voc√™ pode definir a vers√£o exata)
            var serverVersion = new MySqlServerVersion(new Version());

            /*
            üîß services.AddDbContext<AppDbContext>(...)
            - Registra o AppDbContext na inje√ß√£o de depend√™ncia como um servi√ßo.
            - Toda vez que algu√©m solicitar um AppDbContext via construtor, o .NET ir√° fornecer uma inst√¢ncia configurada.

            ‚öôÔ∏è dbContextOptions =>
            - Lambda que permite configurar as op√ß√µes do contexto.
            - Aqui usamos para dizer qual banco de dados usar e qual string de conex√£o utilizar.
            */
            services.AddDbContext<AppDbContext>(dbContextOptions =>
            {
                // Configura o AppDbContext para usar o MySQL com a string de conex√£o e a vers√£o do servidor
                dbContextOptions.UseMySql(connectionString, serverVersion);
            });
           // Aqui registramos os reposit√≥rios na inje√ß√£o de depend√™ncia:
           // ‚úÖ O que significa AddScoped?
           // - Significa que a inst√¢ncia da classe ser√° criada **uma √∫nica vez por requisi√ß√£o HTTP**.
           // - Durante uma mesma requisi√ß√£o, todos os lugares que solicitarem esse servi√ßo (via construtor, por exemplo)
           //   receber√£o **a mesma inst√¢ncia**.
           // - Mas em uma nova requisi√ß√£o, ser√° criada **uma nova inst√¢ncia**.
           //
           // Esse comportamento √© ideal para servi√ßos que usam DbContext, por exemplo, onde voc√™ quer manter
           // a mesma conex√£o/transa√ß√£o durante a requisi√ß√£o toda.

           // Exemplo: Se um controller usa ICriarUsuarioUseCase, e esse use case usa IUsuarioRepository,
           // ambos compartilhar√£o a mesma inst√¢ncia durante aquela requisi√ß√£o.
             services.AddScoped<IUsuarioRepository, UsuarioRepository>();
             services.AddScoped<IEquipamentoRepository, EquipamentoRepository>();
        }
    }
}
