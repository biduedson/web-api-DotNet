// Importa o contexto do banco de dados (AppDbContext), que representa as entidades e as tabelas do banco

using Application.Services.Criptografia;
using Application.Services.Token;
using Domain.Repositories.EquipamentoRepository;
using Domain.Repositories.ReservaDeEquipamentosRepository;
using Domain.Repositories.UsuarioRepository;
using Infrastructure.Data.Context;
using Infrastructure.Data.Repositories;
using Infrastructure.Seguranca;
using Infrastructure.Services.Auth;
using Infrastructure.Services.Criptografia;

// Importa os recursos do Entity Framework Core necess√°rios para configurar o banco de dados
using Microsoft.EntityFrameworkCore;

// Importa a interface IConfiguration, usada para acessar configura√ß√µes da aplica√ß√£o (como strings de conex√£o)
using Microsoft.Extensions.Configuration;

// Importa a interface IServiceCollection, que permite registrar servi√ßos na inje√ß√£o de depend√™ncia
using Microsoft.Extensions.DependencyInjection;

namespace Infrastructure.Extensions
{
    // Define uma classe est√°tica chamada InjecaoDeDependencia.
    // Ela serve para organizar as configura√ß√µes da camada de infraestrutura, como acesso a banco de dados.
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Este m√©todo √© uma extens√£o da IServiceCollection.
        /// Ele registra os servi√ßos da camada de Infrastructure (como o AppDbContext) no container de inje√ß√£o de depend√™ncia.
        /// </summary>
        /// <param name="services">√â a cole√ß√£o de servi√ßos da aplica√ß√£o, usada para registrar depend√™ncias.</param>
        /// <param name="configuration">√â o objeto que carrega as configura√ß√µes da aplica√ß√£o (como appsettings.json).</param>
        public static void AddInfrastructure(this IServiceCollection services, IConfiguration configuration)
        {
            /*
            ‚ùì O que √© `this IServiceCollection services`?
            - √â uma **extens√£o de m√©todo**, ou seja, esse m√©todo ser√° chamado como se fosse parte da IServiceCollection.
              Exemplo: builder.Services.AdicionarInfrastructure(...);

            üß† `IServiceCollection`:
            - √â uma interface fornecida pelo .NET que representa uma **cole√ß√£o de servi√ßos** que podem ser injetados via DI (Dependency Injection).
            - Usamos ela para registrar classes, interfaces, banco de dados, etc.

            üß† `IConfiguration`:
            - Interface que representa as configura√ß√µes da aplica√ß√£o.
            - Pode acessar valores definidos em arquivos como `appsettings.json`, vari√°veis de ambiente, etc.
            - Aqui usamos para obter a **string de conex√£o do banco de dados**.
            */

            // Obt√©m a string de conex√£o chamada "Default" do arquivo de configura√ß√£o (appsettings.json, por exemplo)
            var connectionString = configuration.GetConnectionString("Default");

            // Cria a vers√£o do servidor MySQL que ser√° usada pelo EF Core
            var serverVersion = new MySqlServerVersion(new Version());

            /*
            üîß services.AddDbContext<AppDbContext>(...)
            - Registra o AppDbContext na inje√ß√£o de depend√™ncia como um servi√ßo.
            - Toda vez que algu√©m solicitar um AppDbContext via construtor, o .NET ir√° fornecer uma inst√¢ncia configurada.
            */
            services.AddDbContext<AppDbContext>(dbContextOptions =>
            {
                dbContextOptions.UseMySql(connectionString, serverVersion);
            });
            var jwtSection = configuration.GetSection("Jwt");
            services.Configure<ConfiguracaoJwt>(jwtSection);
            AddAutenticacaoJwt.Configurar(services, configuration);
            // Bind do bloco "Jwt" para ConfiguracoesJwt


            // Registro dos reposit√≥rios seguindo o padr√£o de abstra√ß√£o via interfaces
            // ‚úÖ AddScoped: Uma inst√¢ncia ser√° criada por requisi√ß√£o HTTP (ideal para uso com DbContext)
            services.AddScoped<IUsuarioRepository, UsuarioRepository>();
            services.AddScoped<IEquipamentoRepository, EquipamentoRepository>();
            services.AddScoped<IReservaDeEquipamentosRepository, ReservaDeEquipamentoRepository>();

            // Registro do servi√ßo de token com tempo de vida Singleton
            services.AddSingleton<IServicoDeToken, ServicoDeToken>();




            // Chamada do m√©todo que registra o servi√ßo de criptografia
            AdicionarCriptografiaDesenha(services, configuration);

        }

        /// <summary>
        /// Registra a depend√™ncia do servi√ßo de criptografia de senha com inje√ß√£o de configura√ß√£o personalizada.
        /// </summary>
        private static void AdicionarCriptografiaDesenha(IServiceCollection services, IConfiguration configuration)
        {
            /*
            ‚úÖ Registrando a depend√™ncia pela interface ICriptografiaDeSenha ‚Äî padr√£o de abstra√ß√£o.

            üîÅ Usando uma lambda (factory) porque precisa passar um par√¢metro (AdditionalKey) que n√£o est√° dispon√≠vel diretamente no container.

            üß© Garantindo que a inje√ß√£o de depend√™ncia funcione mesmo com par√¢metros externos (como configura√ß√µes).
            */

            services.AddScoped<ICriptografiaDeSenha>(provider =>
            {
                // Obt√©m a chave adicional de criptografia das configura√ß√µes
                var AdditionalKey = configuration.GetValue<string>("Settings:Passwords:AdditionalKey");
                // Retorna uma nova inst√¢ncia da implementa√ß√£o com os par√¢metros necess√°rios
                return new CriptografiaDeSenha(configuration, AdditionalKey!);
            });
        }
    }
}
